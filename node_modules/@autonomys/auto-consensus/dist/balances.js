"use strict";
// file: src/balances.ts
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.balance = exports.totalIssuance = void 0;
const auto_utils_1 = require("@autonomys/auto-utils");
const account_1 = require("./account");
const totalIssuance = (networkId) => __awaiter(void 0, void 0, void 0, function* () {
    // Get the api instance for the network
    const api = yield (0, auto_utils_1.activate)({ networkId });
    // Get the current total token issuance
    const totalIssuance = yield api.query.balances.totalIssuance();
    return totalIssuance;
});
exports.totalIssuance = totalIssuance;
const balance = (api, address) => __awaiter(void 0, void 0, void 0, function* () {
    // Query the balance of the address and parse the data
    try {
        const rawAccount = yield (0, account_1.account)(api, address);
        const { data } = rawAccount;
        return data;
    }
    catch (error) {
        console.log('error', error);
        throw new Error('Error getting balance' + error);
    }
});
exports.balance = balance;

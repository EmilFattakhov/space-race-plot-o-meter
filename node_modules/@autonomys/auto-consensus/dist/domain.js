"use strict";
// file: src/staking.ts
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.latestConfirmedDomainBlock = exports.domainStakingSummary = exports.domains = void 0;
const parse_1 = require("./utils/parse");
const domains = (api) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const _domains = yield api.query.domains.domainRegistry.entries();
        return _domains.map((o) => (0, parse_1.parseDomain)(o));
    }
    catch (error) {
        console.error('error', error);
        throw new Error('Error querying domains list.' + error);
    }
});
exports.domains = domains;
const domainStakingSummary = (api) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const _domainStakingSummary = yield api.query.domains.domainStakingSummary.entries();
        return _domainStakingSummary.map((domain) => domain[1].toJSON());
    }
    catch (error) {
        console.error('error', error);
        throw new Error('Error querying domains staking summary list.' + error);
    }
});
exports.domainStakingSummary = domainStakingSummary;
const latestConfirmedDomainBlock = (api) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const _latestConfirmedDomainBlock = yield api.query.domains.latestConfirmedDomainBlock.entries();
        return _latestConfirmedDomainBlock.map((domainBlock) => (Object.assign({ id: parseInt(domainBlock[0].toHuman()[0]) }, domainBlock[1].toJSON())));
    }
    catch (error) {
        console.error('error', error);
        throw new Error('Error querying latest confirmed block list.' + error);
    }
});
exports.latestConfirmedDomainBlock = latestConfirmedDomainBlock;

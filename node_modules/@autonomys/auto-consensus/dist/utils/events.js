"use strict";
// file: src/utils/events.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.events = exports.expectSuccessfulTxEvent = exports.eventsGroup = exports.eventName = void 0;
// Utility Function for Event Names
const eventName = (type, event) => `${type}.${event}`;
exports.eventName = eventName;
// System Events
const system = {
    failure: (0, exports.eventName)("system" /* Type.system */, 'ExtrinsicFailed'),
    newAccount: (0, exports.eventName)("system" /* Type.system */, 'NewAccount'),
    success: (0, exports.eventName)("system" /* Type.system */, 'ExtrinsicSuccess'),
};
// Balances Events
const balances = {
    deposit: (0, exports.eventName)("balances" /* Type.balances */, 'Deposit'),
    endowed: (0, exports.eventName)("balances" /* Type.balances */, 'Endowed'),
    transfer: (0, exports.eventName)("balances" /* Type.balances */, 'Transfer'),
    withdraw: (0, exports.eventName)("balances" /* Type.balances */, 'Withdraw'),
};
// Transaction Payment Events
const transactionPayment = {
    feePaid: (0, exports.eventName)("transactionPayment" /* Type.transactionPayment */, 'TransactionFeePaid'),
};
// Domains Events
const domains = {
    forceDomainEpochTransition: (0, exports.eventName)("domains" /* Type.domains */, 'ForceDomainEpochTransition'),
    fundsUnlocked: (0, exports.eventName)("domains" /* Type.domains */, 'FundsUnlocked'),
    operatorDeregistered: (0, exports.eventName)("domains" /* Type.domains */, 'OperatorDeregistered'),
    operatorNominated: (0, exports.eventName)("domains" /* Type.domains */, 'OperatorNominated'),
    operatorRegistered: (0, exports.eventName)("domains" /* Type.domains */, 'OperatorRegistered'),
    operatorUnlocked: (0, exports.eventName)("domains" /* Type.domains */, 'OperatorUnlocked'),
    storageFeeDeposited: (0, exports.eventName)("domains" /* Type.domains */, 'StorageFeeDeposited'),
    withdrawStake: (0, exports.eventName)("domains" /* Type.domains */, 'WithdrewStake'),
};
// Sudo Events
const sudo = {
    sudid: (0, exports.eventName)("sudo" /* Type.sudo */, 'Sudid'),
};
// Group of Events
exports.eventsGroup = {
    system,
    balances,
    transactionPayment,
    domains,
    sudo,
};
// Export a default success event
exports.expectSuccessfulTxEvent = [system.success];
// Events Mappings
exports.events = {
    transfer: [balances.withdraw, balances.transfer, transactionPayment.feePaid, system.success],
    operatorRegistered: [
        balances.withdraw,
        domains.storageFeeDeposited,
        domains.operatorRegistered,
        transactionPayment.feePaid,
        system.success,
    ],
    operatorNominated: [
        balances.withdraw,
        balances.transfer,
        domains.storageFeeDeposited,
        domains.operatorNominated,
        transactionPayment.feePaid,
        system.success,
    ],
    operatorDeregistered: [
        balances.withdraw,
        domains.operatorDeregistered,
        transactionPayment.feePaid,
        system.success,
    ],
    withdrawStake: [
        balances.withdraw,
        domains.withdrawStake,
        transactionPayment.feePaid,
        system.success,
    ],
    unlockFunds: [
        balances.withdraw,
        domains.fundsUnlocked,
        transactionPayment.feePaid,
        system.success,
    ],
    forceDomainEpochTransition: [
        balances.withdraw,
        domains.forceDomainEpochTransition,
        sudo.sudid,
        balances.deposit,
        transactionPayment.feePaid,
        system.success,
    ],
};

"use strict";
// file: src/network.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkDomainRpcUrls = exports.getNetworkDomainDetails = exports.getNetworkRpcUrls = exports.getNetworkDetails = void 0;
const network_1 = require("./constants/network");
const getNetworkDetails = (input) => {
    // If no id is provided, return the default network
    if (!input || !input.networkId)
        return network_1.defaultNetwork;
    const { networkId } = input;
    // Find the network with the provided id
    const network = network_1.networks.find((network) => network.id === networkId);
    if (!network)
        throw new Error(`Network with id ${networkId} not found`);
    return network;
};
exports.getNetworkDetails = getNetworkDetails;
const getNetworkRpcUrls = (input) => {
    // Get the network details
    const network = (0, exports.getNetworkDetails)(input);
    if (!network.rpcUrls || network.rpcUrls.length === 0)
        throw new Error(`Network has no rpcUrls`);
    return network.rpcUrls;
};
exports.getNetworkRpcUrls = getNetworkRpcUrls;
const getNetworkDomainDetails = (params) => {
    const { networkId, domainId } = params;
    // Find the network with the provided id
    const network = (0, exports.getNetworkDetails)({ networkId });
    if (!network)
        throw new Error(`Network with id ${networkId} not found`);
    // Find the domain with the provided id
    const domain = network.domains.find((domain) => domain.domainId === domainId);
    if (!domain)
        throw new Error(`Domain with id ${domainId} not found`);
    return domain;
};
exports.getNetworkDomainDetails = getNetworkDomainDetails;
const getNetworkDomainRpcUrls = (params) => {
    // Get the network details
    const domain = (0, exports.getNetworkDomainDetails)(params);
    if (!domain.rpcUrls || domain.rpcUrls.length === 0)
        throw new Error(`Domain has no rpcUrls`);
    return domain.rpcUrls;
};
exports.getNetworkDomainRpcUrls = getNetworkDomainRpcUrls;

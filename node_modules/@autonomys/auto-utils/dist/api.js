"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.disconnect = exports.activateDomain = exports.activate = exports.createConnection = void 0;
const api_1 = require("@polkadot/api");
const network_1 = require("./network");
const network_2 = require("./types/network");
const createConnection = (endpoint, options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    // Create the provider
    const provider = new api_1.WsProvider(endpoint);
    // Create the API instance
    const api = yield api_1.ApiPromise.create(Object.assign(Object.assign({}, options), { types: Object.assign(Object.assign({}, network_2.CHAIN_TYPES), options === null || options === void 0 ? void 0 : options.types), noInitWarn: (_a = options === null || options === void 0 ? void 0 : options.noInitWarn) !== null && _a !== void 0 ? _a : true, provider }));
    yield api.isReady;
    return api;
});
exports.createConnection = createConnection;
const activate = (params) => __awaiter(void 0, void 0, void 0, function* () {
    // Get the first rpc urls for the network
    const endpoint = (0, network_1.getNetworkRpcUrls)(params);
    // Remove the networkId from the input
    if (params)
        delete params.networkId;
    return yield (0, exports.createConnection)(endpoint[0], params);
});
exports.activate = activate;
const activateDomain = (params) => __awaiter(void 0, void 0, void 0, function* () {
    // Get the first rpc urls for the network
    const endpoint = (0, network_1.getNetworkDomainRpcUrls)(params);
    // Remove the domainId from the input
    const { domainId } = params, rest = __rest(params, ["domainId"]);
    return yield (0, exports.createConnection)(endpoint[0], rest);
});
exports.activateDomain = activateDomain;
const disconnect = (api) => __awaiter(void 0, void 0, void 0, function* () {
    // Disconnect the API instance and the provider
    yield api.disconnect();
});
exports.disconnect = disconnect;

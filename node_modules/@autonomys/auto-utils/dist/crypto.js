"use strict";
// file: src/crypto.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.blake2b_256 = blake2b_256;
exports.stringToUint8Array = stringToUint8Array;
exports.concatenateUint8Arrays = concatenateUint8Arrays;
const util_crypto_1 = require("@polkadot/util-crypto");
/**
 * Hashes the given data using BLAKE2b-256.
 *
 * @param data Uint8Array - The data to be hashed.
 * @returns string - The BLAKE2b-256 hash of the data as a hex string.
 */
function blake2b_256(data) {
    return (0, util_crypto_1.blake2AsHex)(data, 256);
}
/**
 * Converts a string to a Uint8Array using UTF-8 encoding.
 *
 * This function uses the TextEncoder API to convert a plain string into its equivalent byte array
 * representation in UTF-8 format. It is useful for scenarios where string data needs to be processed
 * in a binary format, such as hashing or cryptographic operations.
 *
 * @param text The string to be converted into a byte array.
 * @returns Uint8Array - The UTF-8 encoded byte array representation of the input string.
 *
 * @example
 * const text = "Hello, world!";
 * const byteArray = stringToUint8Array(text);
 * console.log(byteArray); // Outputs the byte array of the string
 */
function stringToUint8Array(text) {
    const encoder = new TextEncoder(); // Create a new TextEncoder instance
    return encoder.encode(text); // Encode the string to a Uint8Array using UTF-8 encoding
}
/**
 * Concatenates two Uint8Array instances into a single Uint8Array.
 */
function concatenateUint8Arrays(array1, array2) {
    const combined = new Uint8Array(array1.length + array2.length);
    combined.set(array1);
    combined.set(array2, array1.length);
    return combined;
}

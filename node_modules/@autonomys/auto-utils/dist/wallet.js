"use strict";
// file: src/wallet.ts
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMockWallet = exports.mockWallets = exports.activateWallet = exports.generateWallet = exports.setupWallet = void 0;
const api_1 = require("@polkadot/api");
const util_crypto_1 = require("@polkadot/util-crypto");
const address_1 = require("./address");
const api_2 = require("./api");
const network_1 = require("./constants/network");
const wallet_1 = require("./constants/wallet");
const setupWallet = (params) => {
    const keyring = new api_1.Keyring({ type: 'sr25519' });
    let keyringPair;
    if (params.uri) {
        // Treat as uri
        keyringPair = keyring.addFromUri(params.uri);
    }
    else if (params.mnemonic) {
        // Treat as mnemonic
        keyringPair = keyring.addFromUri(params.mnemonic);
    }
    else
        throw new Error('Invalid mnemonic or private key');
    return {
        keyringPair,
        address: (0, address_1.address)(keyringPair.address),
        commonAddress: keyringPair.address,
    };
};
exports.setupWallet = setupWallet;
const generateWallet = () => {
    const mnemonic = (0, util_crypto_1.mnemonicGenerate)();
    const { keyringPair, address, commonAddress } = (0, exports.setupWallet)({ mnemonic });
    return {
        mnemonic,
        keyringPair,
        address,
        commonAddress,
    };
};
exports.generateWallet = generateWallet;
const activateWallet = (params) => __awaiter(void 0, void 0, void 0, function* () {
    if (!params.api) {
        // Create the API instance if not provided
        params.api =
            params.domainId === undefined
                ? yield (0, api_2.activate)(params)
                : yield (0, api_2.activateDomain)(params);
    }
    const accounts = [];
    if (params.mnemonic || params.uri) {
        // Attach the wallet in a node environment
        const { keyringPair } = (0, exports.setupWallet)(params);
        if (keyringPair)
            accounts.push(keyringPair);
    }
    else if (typeof window !== 'undefined') {
        const { web3Enable, web3Accounts } = yield Promise.resolve().then(() => __importStar(require('@polkadot/extension-dapp')));
        // Enable Polkadot.js extension in the browser
        yield web3Enable(params.appName || 'Auto');
        // Get the list of accounts from the extension
        const allAccounts = yield web3Accounts();
        accounts.push(...allAccounts);
        if (allAccounts.length === 0)
            console.warn('No accounts found in the Polkadot.js extension');
    }
    else
        throw new Error('No wallet provided');
    return { api: params.api, accounts, address: (0, address_1.address)(accounts[0].address) };
});
exports.activateWallet = activateWallet;
const mockWallets = (...args_1) => __awaiter(void 0, [...args_1], void 0, function* (network = { networkId: network_1.defaultNetwork.id }, api) {
    const wallets = [];
    for (const uri of wallet_1.mockURIs) {
        const wallet = yield (0, exports.activateWallet)(Object.assign(Object.assign({}, network), { uri,
            api }));
        wallets.push(wallet);
    }
    return wallets;
});
exports.mockWallets = mockWallets;
const getMockWallet = (name, wallets) => wallets[Object.values(wallet_1.mockURIs).indexOf(`//${name}`)];
exports.getMockWallet = getMockWallet;

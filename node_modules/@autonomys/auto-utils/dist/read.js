"use strict";
// file: src/read.ts
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readFromFileSystem = exports.readFromLocalStorage = exports.read = void 0;
const read = (key) => __awaiter(void 0, void 0, void 0, function* () {
    // detect if we are in the browser or in node
    if (typeof window !== 'undefined')
        return (0, exports.readFromLocalStorage)(key);
    else
        return (0, exports.readFromFileSystem)(key);
});
exports.read = read;
const readFromLocalStorage = (key) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof window !== 'undefined') {
        // read from local storage
        const value = localStorage.getItem(key);
        try {
            return value ? JSON.parse(value) : null;
        }
        catch (error) {
            throw new Error('Failed to parse data from localStorage: ' + error);
        }
    }
    else
        throw new Error('This function can only be used in the browser');
});
exports.readFromLocalStorage = readFromLocalStorage;
const readFromFileSystem = (key) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof window === 'undefined') {
        // read from file system
        const fs = yield Promise.resolve().then(() => __importStar(require('fs/promises')));
        try {
            const data = yield fs.readFile(key, { encoding: 'utf-8' });
            return JSON.parse(data);
        }
        catch (error) {
            throw new Error('Failed to read or parse file: ' + error);
        }
    }
    else
        throw new Error('This function can only be used in node');
});
exports.readFromFileSystem = readFromFileSystem;

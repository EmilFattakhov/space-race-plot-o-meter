"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signatureVerify = exports.signingKey = exports.signMessage = void 0;
const util_crypto_1 = require("@polkadot/util-crypto");
Object.defineProperty(exports, "signatureVerify", { enumerable: true, get: function () { return util_crypto_1.signatureVerify; } });
const format_1 = require("./format");
const signMessage = (signer, address, data) => __awaiter(void 0, void 0, void 0, function* () {
    if (!signer.signRaw)
        throw new Error('signRaw not available on the signer');
    return yield signer.signRaw({
        address,
        type: 'bytes',
        data,
    });
});
exports.signMessage = signMessage;
const signingKey = (publicKey) => (0, format_1.u8aToHex)(publicKey);
exports.signingKey = signingKey;
